#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#
#set -x
set -e

MOTR_LIBEXEC="/usr/libexec/cortx-motr"
MOTR_MKFS="$MOTR_LIBEXEC/motr-mkfs"
MOTR_SERVER="$MOTR_LIBEXEC/motr-server"
MOTR_STATUS_PATH="/var/motr/status"
MOTR_MKFS_DIR="/var/motr/m0d"
MOTR_SYSCONFIG="/etc/sysconfig"

# USERMODE PATH
CORTX_PATH="/etc/cortx"
CORTX_SYSCONFIG="/etc/cortx/motr/sysconfig"
CORTX_FIDS_MAP="/etc/cortx/ENVIRONMENT_TYPES"
DEFAULT_MACHINE_ID=1

service="ha"
ha_proxy=false
mkfs_force=false
mkfs_dir_present=false
confd_proxy="/etc/motr/confd.xc"
STANDALONE_DEPLOY=false
copy_id=false


help()
{
    [[ $1 == stdout ]] && usage || usage >&2
    exit 1
}


usage()
{
    cat <<USAGE_END
Usage: $PROG_NAME [-h|--help] [-s] [-d] [-H]
   -d              Enter <mkfs|m0d> script with the file
                   name to be deployed.
                   /etc/cortx <fids mapping file expected>
                   ${0} -d <mkfs|m0d> <motr_confd_1>
   -s              Enter <mkfs|m0d> script with the service
                   fids to be deployed
                   ${0} -s <mkfs|m0d> <fids>
   -m              copy machine id to /etc/machine-id and
                   /etc/sysconfig files
   -H|--ha-proxy   Instead of actual HA. pseudo HA is created
                   which is similar to motr ST setups

   -h|--help       Print this help screen.
USAGE_END
}

get_fids()
{
        srv_index=$1
        IFS=$'\n'
        for FIDS_LINE in `cat $CORTX_FIDS_MAP`; do
                index=$(echo $FIDS_LINE | cut -d "-" -f 1)
                if [[ "$index" == "$srv_index" ]] ; then
                        fids=$(echo $FIDS_LINE | cut -d "-" -f 2)
                        break
                fi
        done
        unset IFS

        if [[ -f "$CORTX_SYSCONFIG/m0d-$fids" ]] ; then
                echo "$fids"
        else
                echo "NIL"
        fi
}

#
# Parse CLI options
#

parse_cli_options()
{

    TEMP=$( getopt --options dhsfm \
                   --longoptions help,--ha-proxy \
                   --name "$PROG_NAME" -- "$@" )

    [[ $? -ne 0 ]] && help

    # Note the quotes around `$TEMP': they are essential!
    eval set -- "$TEMP"

    while true ; do
        case "$1" in
            -h|--help)          help stdout ;;
            -s)                 deploy_script=$3; service=$4;     shift;;
            -d)                 STANDALONE_DEPLOY=true; deploy_script=$3; deploy_srv=$4;  shift;;
            -m)                 copy_id=true; MACHINE_ID=$3; shift ;;
            --)                 shift; break ;;
             *)                 echo 'getopt: internal error...'; exit 1 ;;
        esac
    done
}

scan_and_update_mach_id()
{
        filepath=$1
        UUID=$2
        list=$(ls -ltr "$filepath/m0d-"* | tr -s " " | cut -d " " -f9 &2> /dev/null)
        if [[ $? -eq 0 ]]; then
                for file in $list
                do
                        echo $file
                        chk=$(source $file; echo $MOTR_NODE_UUID)
                        echo $chk
                        if [[ "$UUID" != "$chk" ]]; then
                                echo "checking $chk $UUID"
                                sed -i '/MOTR_NODE_UUID/d' $file
                                sed -i -e '$aMOTR_NODE_UUID='"'$UUID'" $file
                        fi
                done
        fi
}

copy_machine_id()
{
        id=$1
        value=$(( 100000000000 + $id ))
        UUID="00000000-0000-0000-0000-"$value

        scan_and_update_mach_id $MOTR_SYSCONFIG $UUID
        scan_and_update_mach_id $CORTX_SYSCONFIG $UUID

        MACH_ID=$(echo "${UUID//-}")
        echo $MACH_ID > /etc/machine-id
}

start_mkfs_server()
{
        $MOTR_MKFS $1
}

start_m0d_server()
{
        $MOTR_SERVER "m0d-$1"
}

invalid_option()
{
        echo "Invalid arguments"
        usage
        exit 1
}

#Make sure this function is called only
#during "-s" sequence of the script
start_all_service() {
        if [[ $deploy_script == "mkfs" ]]; then
                start_mkfs_server $1
        fi
        start_m0d_server $1
}

#start of the program
if [[ "$#" -le 1 ]]; then
        invalid_option
fi

parse_cli_options "$@"

if [[ $copy_id == true ]]; then
        if [[ -z $MACHINE_ID ]]; then
                copy_machine_id $DEFAULT_MACHINE_ID
        else
                copy_machine_id $MACHINE_ID
        fi

        # After updating machine-id exit the script
        exit 0
fi

if [[ -z $deploy_script ]]; then
        invalid_option
fi

if [[ $STANDALONE_DEPLOY == true ]] ; then
        if [[ -z $deploy_srv ]]; then
                invalid_option
        fi
        echo "Stand-Alone Deployment with service : $deploy_srv"
        if [[ -f $CORTX_FIDS_MAP ]] ; then
                #source $CORTX_SYSCONFIG/$deploy_srv
                service=$(get_fids $deploy_srv)
                if [[ $service == "NIL" ]]; then
                        echo "No fids found for given index $deploy_srv in $CORTX_FIDS_MAP"
                        exit 1
                fi
        else
                echo "File $CORTX_SYSCONFIG/$deploy_srv not present"
                exit 1;
        fi
fi

echo "Starting Service : $service"
if [[ $deploy_script == "mkfs" ]] ; then
        start_mkfs_server $service
fi

#starting the server
if [[ $deploy_script == "m0d" ]] ; then
        start_m0d_server "$service"
fi
